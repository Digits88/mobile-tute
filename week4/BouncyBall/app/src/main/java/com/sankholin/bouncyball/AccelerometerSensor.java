package com.sankholin.bouncyball;

import android.content.Context;
import android.hardware.Sensor;
import android.hardware.SensorEvent;
import android.hardware.SensorEventListener;
import android.hardware.SensorManager;

public class AccelerometerSensor {
    private SensorManager mSensorManager;
    private Sensor mAccelerometer;
    private WorldView worldView;
    private Context context;
    private long lastUpdate;

    public AccelerometerSensor(WorldView worldView, Context context) {
        this.worldView = worldView;
        this.context = context;
        lastUpdate = System.currentTimeMillis();
        startSensor();
    }

    public void startSensor() {
        mSensorManager = (SensorManager) context.getSystemService(context.SENSOR_SERVICE);
        mAccelerometer = mSensorManager.getDefaultSensor(Sensor.TYPE_ACCELEROMETER);
        mSensorManager.registerListener(new SensorEventListener() {
            //onSensorChanged() method called if there is a new sensor event
            @Override
            public void onSensorChanged(SensorEvent sensorEvent) {
                int accuracy = sensorEvent.accuracy;
                long timestamp = sensorEvent.timestamp;
                // return acceleration in X, Y, and Z direction
                float values[] = sensorEvent.values;

                try {
                    long curTime = System.currentTimeMillis();
                    if ((curTime - lastUpdate) > 100) {
                        lastUpdate = curTime;
                        //Once we require the acceleration generated by sensor, we can use it to update the speed of red ball
                        worldView.ball.setXSpeed(worldView.ball.getXSpeed() + ((-1 * values[0]) / 30));
                        worldView.ball.setYSpeed(worldView.ball.getYSpeed() + (values[1] / 30));
                        System.out.println("@ X:" + values[0] + " Y:" + values[1]);
                    }
                } catch (Exception e) {
                }
            }

            @Override
            public void onAccuracyChanged(Sensor sensor, int i) {
            }
        }, mAccelerometer, SensorManager.SENSOR_DELAY_GAME);
    }
}
